// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: pb/chat_room.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ChatRoomService_Chat_FullMethodName = "/ChatRoomService/Chat"
)

// ChatRoomServiceClient is the client API for ChatRoomService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatRoomServiceClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoomService_ChatClient, error)
}

type chatRoomServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatRoomServiceClient(cc grpc.ClientConnInterface) ChatRoomServiceClient {
	return &chatRoomServiceClient{cc}
}

func (c *chatRoomServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatRoomService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatRoomService_ServiceDesc.Streams[0], ChatRoomService_Chat_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &chatRoomServiceChatClient{stream}
	return x, nil
}

type ChatRoomService_ChatClient interface {
	Send(*ChatClientMsg) error
	Recv() (*ChatServerMsg, error)
	grpc.ClientStream
}

type chatRoomServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatRoomServiceChatClient) Send(m *ChatClientMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatRoomServiceChatClient) Recv() (*ChatServerMsg, error) {
	m := new(ChatServerMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatRoomServiceServer is the server API for ChatRoomService service.
// All implementations must embed UnimplementedChatRoomServiceServer
// for forward compatibility
type ChatRoomServiceServer interface {
	Chat(ChatRoomService_ChatServer) error
	mustEmbedUnimplementedChatRoomServiceServer()
}

// UnimplementedChatRoomServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatRoomServiceServer struct {
}

func (UnimplementedChatRoomServiceServer) Chat(ChatRoomService_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedChatRoomServiceServer) mustEmbedUnimplementedChatRoomServiceServer() {}

// UnsafeChatRoomServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatRoomServiceServer will
// result in compilation errors.
type UnsafeChatRoomServiceServer interface {
	mustEmbedUnimplementedChatRoomServiceServer()
}

func RegisterChatRoomServiceServer(s grpc.ServiceRegistrar, srv ChatRoomServiceServer) {
	s.RegisterService(&ChatRoomService_ServiceDesc, srv)
}

func _ChatRoomService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatRoomServiceServer).Chat(&chatRoomServiceChatServer{stream})
}

type ChatRoomService_ChatServer interface {
	Send(*ChatServerMsg) error
	Recv() (*ChatClientMsg, error)
	grpc.ServerStream
}

type chatRoomServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatRoomServiceChatServer) Send(m *ChatServerMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatRoomServiceChatServer) Recv() (*ChatClientMsg, error) {
	m := new(ChatClientMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatRoomService_ServiceDesc is the grpc.ServiceDesc for ChatRoomService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatRoomService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatRoomService",
	HandlerType: (*ChatRoomServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _ChatRoomService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/chat_room.proto",
}
